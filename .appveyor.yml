services:
- docker

# Build worker image (VM template)
environment:
  matrix:

  - GENERATOR: Visual Studio 15 2017
    APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2017
    PLATFORM: x86
    BUILD_TYPE: RelWithDebInfo
    # NB Can't use JAVA_HOME because appveyor trashes it
    JAVA_HOME_OVERRIDE: C:\Program Files (x86)\Java\jdk1.8.0

  - GENERATOR: Visual Studio 15 2017 Win64
    APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2017
    PLATFORM: x64
    BUILD_TYPE: RelWithDebInfo
    # NB Can't use JAVA_HOME because appveyor trashes it
    JAVA_HOME_OVERRIDE: C:\Program Files\Java\jdk1.8.0

  - APPVEYOR_BUILD_WORKER_IMAGE: ubuntu1804
    DOCKER_IMAGE: fedora:30

  - APPVEYOR_BUILD_WORKER_IMAGE: ubuntu1804
    DOCKER_IMAGE: fedora:31

  - APPVEYOR_BUILD_WORKER_IMAGE: ubuntu1804
    DOCKER_IMAGE: fedora:32

  - APPVEYOR_BUILD_WORKER_IMAGE: ubuntu1804
    DOCKER_IMAGE: ubuntu:16.04

  - APPVEYOR_BUILD_WORKER_IMAGE: ubuntu1804
    DOCKER_IMAGE: ubuntu:18.04

  - APPVEYOR_BUILD_WORKER_IMAGE: ubuntu1804
    DOCKER_IMAGE: ubuntu:20.04

  - APPVEYOR_BUILD_WORKER_IMAGE: ubuntu1804
    DOCKER_IMAGE: centos:6

  - APPVEYOR_BUILD_WORKER_IMAGE: ubuntu1804
    DOCKER_IMAGE: centos:7

  - APPVEYOR_BUILD_WORKER_IMAGE: ubuntu1804
    DOCKER_IMAGE: centos:8
init:
# TODO: Make programatic
- cmd: set VERSION=6.3.0rc1
- sh: export VERSION=6.3.0rc1
- cmd: set OPENMAMA_INSTALL_DIR=%APPVEYOR_BUILD_FOLDER%\openmama-%VERSION%.win.%PLATFORM%

# Build chain tooling
install:
- cmd: choco install -y unzip gow wget gradle nunit-console-runner nunit-extension-nunit-v2-driver
- cmd: refreshenv
- cmd: set PATH=C:\ProgramData\chocolatey\bin;%PATH%
- cmd: |-
    cd "C:\Tools\vcpkg"
    git pull
    git checkout 563ab882e1fdb45a851b03d56f4c8d18cf00d7ec
    .\bootstrap-vcpkg.bat
    cd %appveyor_build_folder%
- sh: sudo apt-get update -qq
- sh: sudo apt-get install -y docker python
- sh: sudo pip install --upgrade cloudsmith-cli

# Dependencies
before_build:
- cmd: vcpkg install qpid-proton:%PLATFORM%-windows libevent:%PLATFORM%-windows apr:%PLATFORM%-windows gtest:%PLATFORM%-windows

build_script:
  # Windows build
- cmd: set PATH=%JAVA_HOME_OVERRIDE%\bin;%PATH%
- cmd: |-
    cd %APPVEYOR_BUILD_FOLDER%
    mkdir build
    cd build
    cmake -DCMAKE_BUILD_TYPE=RelWithDebInfo -DWITH_CSHARP=ON -DWITH_UNITTEST=ON -DWITH_JAVA=ON -DPROTON_ROOT=C:/tools/vcpkg/installed/%PLATFORM%-windows/ -DGTEST_ROOT=C:/tools/vcpkg/installed/%PLATFORM%-windows/ -DINSTALL_RUNTIME_DEPENDENCIES=ON -DCMAKE_INSTALL_PREFIX="%OPENMAMA_INSTALL_DIR%" -G "%GENERATOR%" -DCMAKE_TOOLCHAIN_FILE=c:/tools/vcpkg/scripts/buildsystems/vcpkg.cmake -DAPR_ROOT=C:/tools/vcpkg/installed/%PLATFORM%-windows/ ..
    cmake --build . --config RelWithDebInfo --target install
    cd ..
    python release_scripts\ci-run.py
    7z a openmama-%VERSION%.win.%PLATFORM%.zip "%OPENMAMA_INSTALL_DIR%"

  # Linux build
- sh: docker build -t omdocker -f release_scripts/Dockerfile . --build-arg IMAGE=$DOCKER_IMAGE --build-arg INSTALL_RUNTIME_DEPENDENCIES=$INSTALL_RUNTIME_DEPENDENCIES
- sh: docker run -e VERSION=$VERSION -v $(pwd):/apps/release --rm omdocker

artifacts:
  - path: '*.deb'
    name: OpenMAMA Ubuntu Package
  - path: '*.rpm'
    name: OpenMAMA RPM Package
  - path: '*.zip'
    name: OpenMAMA Windows Release

test: off
